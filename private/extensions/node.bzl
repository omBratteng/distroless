"node"

BUILD_TMPL = """\
# GENERATED BY node_archive.bzl
load("@distroless//private/pkg:debian_spdx.bzl", "debian_spdx")
load("@distroless//private/util:merge_providers.bzl", "merge_providers")
load("@rules_pkg//:pkg.bzl", "pkg_tar")

pkg_tar(
    name = "data",
    srcs = glob(
        [
            "output/bin/node",
            "output/LICENSE",
        ],
    ),
    package_dir = "/nodejs",
    strip_prefix = "external/{canonical_name}/output"
)

pkg_tar(
    name = "_control",
    srcs = ["control"]
)

debian_spdx(
    name = "spdx",
    control = ":_control.tar",
    data = ":data.tar",
    package_name = "{package_name}",
    spdx_id = "{spdx_id}",
    sha256 = "{sha256}",
    urls = [{urls}]
)

merge_providers(
    name = "{name}",
    srcs = [":data", ":spdx"],
    visibility = ["//visibility:public"],
)
"""

def _impl(rctx):
    rctx.report_progress("Fetching {}".format(rctx.attr.package_name))
    rctx.download_and_extract(
        url = rctx.attr.urls,
        sha256 = rctx.attr.sha256,
        type = rctx.attr.type,
        stripPrefix = rctx.attr.strip_prefix,
        output = "output",
    )
    rctx.template(
        "control",
        rctx.attr.control,
        substitutions = {
            "{{VERSION}}": rctx.attr.version,
            "{{ARCHITECTURE}}": rctx.attr.architecture,
            "{{SHA256}}": rctx.attr.sha256,
        },
    )
    rctx.file(
        "BUILD.bazel",
        content = BUILD_TMPL.format(
            canonical_name = rctx.attr.name,
            name = rctx.attr.name.split("~")[-1],
            package_name = rctx.attr.package_name,
            spdx_id = rctx.attr.name,
            urls = ",".join(['"%s"' % url for url in rctx.attr.urls]),
            sha256 = rctx.attr.sha256,
        ),
    )

node_archive = repository_rule(
    implementation = _impl,
    attrs = {
        "urls": attr.string_list(mandatory = True),
        "sha256": attr.string(mandatory = True),
        "type": attr.string(default = ".tar.gz"),
        "strip_prefix": attr.string(),
        "package_name": attr.string(default = "nodejs"),
        "version": attr.string(mandatory = True),
        "architecture": attr.string(mandatory = True),
        # control is only used to populate the sbom, see https://github.com/GoogleContainerTools/distroless/issues/1373
        # for why writing debian control files to the image is incompatible with scanners.
        "control": attr.label(),
    },
)

def _node_impl(module_ctx):
    mod = module_ctx.modules[0]

    if len(module_ctx.modules) > 1:
        fail("node.archive should be called only once")
    if not mod.is_root:
        fail("node.archive should be called from root module only.")

    # Node (https://nodejs.org/en/about/releases/)
    # Follow Node's maintainence schedule and support all LTS versions that are not end of life

    node_archive(
        name = "nodejs20_amd64",
        sha256 = "d80a33707605ced9a31b8f543cea9ab512bc3d2fef2c148f31a50e939ff07560",
        strip_prefix = "node-v20.19.4-linux-x64/",
        urls = ["https://nodejs.org/dist/v20.19.4/node-v20.19.4-linux-x64.tar.gz"],
        version = "20.19.4",
        architecture = "amd64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs20_arm64",
        sha256 = "d200798332b7a56d355888ce58e6a639fac7939a4833e5bc8780c66888e1ce4d",
        strip_prefix = "node-v20.19.4-linux-arm64/",
        urls = ["https://nodejs.org/dist/v20.19.4/node-v20.19.4-linux-arm64.tar.gz"],
        version = "20.19.4",
        architecture = "arm64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs20_arm",
        sha256 = "bdff86d5ff91214c6d6c421b42b35442daebcf42f85bbfb6643e7a950a093c3b",
        strip_prefix = "node-v20.19.4-linux-armv7l/",
        urls = ["https://nodejs.org/dist/v20.19.4/node-v20.19.4-linux-armv7l.tar.gz"],
        version = "20.19.4",
        architecture = "arm",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs20_ppc64le",
        sha256 = "572e3a4cc5371680b763eddda3df45704e3478d3c2d3c774927186184fba3ac9",
        strip_prefix = "node-v20.19.4-linux-ppc64le/",
        urls = ["https://nodejs.org/dist/v20.19.4/node-v20.19.4-linux-ppc64le.tar.gz"],
        version = "20.19.4",
        architecture = "ppc64le",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs20_s390x",
        sha256 = "17a95c4591478bf3ccd8919ff74810feb46d320c73e90430ac8ef0fb724705ae",
        strip_prefix = "node-v20.19.4-linux-s390x/",
        urls = ["https://nodejs.org/dist/v20.19.4/node-v20.19.4-linux-s390x.tar.gz"],
        version = "20.19.4",
        architecture = "s390x",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs22_amd64",
        sha256 = "cfb6ac0cf339825fe36efd1f18a79016b02aca19fbfa6c9547c57e27dc09f6ea",
        strip_prefix = "node-v22.17.1-linux-x64/",
        urls = ["https://nodejs.org/dist/v22.17.1/node-v22.17.1-linux-x64.tar.gz"],
        version = "22.17.1",
        architecture = "amd64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs22_arm64",
        sha256 = "f53510706998cf044f634190416f0588e7e1937aecea938768952e0f0ac1f41b",
        strip_prefix = "node-v22.17.1-linux-arm64/",
        urls = ["https://nodejs.org/dist/v22.17.1/node-v22.17.1-linux-arm64.tar.gz"],
        version = "22.17.1",
        architecture = "arm64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs22_arm",
        sha256 = "520dcd113eca345074cab3c3e7c23b93517a6a0a22fac98e843b195fcfdcc5d7",
        strip_prefix = "node-v22.17.1-linux-armv7l/",
        urls = ["https://nodejs.org/dist/v22.17.1/node-v22.17.1-linux-armv7l.tar.gz"],
        version = "22.17.1",
        architecture = "arm",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs22_ppc64le",
        sha256 = "c07ee9fb0c0396f5551a9c0228570fdb45ebf21ba9723f7098671320f364a202",
        strip_prefix = "node-v22.17.1-linux-ppc64le/",
        urls = ["https://nodejs.org/dist/v22.17.1/node-v22.17.1-linux-ppc64le.tar.gz"],
        version = "22.17.1",
        architecture = "ppc64le",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs22_s390x",
        sha256 = "5ee94f6e421a383435c2f96b8e5742ad0eea54a851dc6b66583fc28a2f84cd33",
        strip_prefix = "node-v22.17.1-linux-s390x/",
        urls = ["https://nodejs.org/dist/v22.17.1/node-v22.17.1-linux-s390x.tar.gz"],
        version = "22.17.1",
        architecture = "s390x",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs24_amd64",
        sha256 = "063f2eb299ba60e3fc9b424d8e87d0e2f6be84b39bdeadc421ee2865914c498b",
        strip_prefix = "node-v24.4.1-linux-x64/",
        urls = ["https://nodejs.org/dist/v24.4.1/node-v24.4.1-linux-x64.tar.gz"],
        version = "24.4.1",
        architecture = "amd64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs24_arm64",
        sha256 = "fde5421e2652e51199bc678e1e6c4d80bbb4c55337ec0a82206568517e9792ef",
        strip_prefix = "node-v24.4.1-linux-arm64/",
        urls = ["https://nodejs.org/dist/v24.4.1/node-v24.4.1-linux-arm64.tar.gz"],
        version = "24.4.1",
        architecture = "arm64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs24_ppc64le",
        sha256 = "b4ee745e4d8a2c3f3a793a50695d769322b81c79f2b7b79c2a359bca892a0f36",
        strip_prefix = "node-v24.4.1-linux-ppc64le/",
        urls = ["https://nodejs.org/dist/v24.4.1/node-v24.4.1-linux-ppc64le.tar.gz"],
        version = "24.4.1",
        architecture = "ppc64le",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs24_s390x",
        sha256 = "8c9a680c3ae7c8b4a02f55faa055d960ab639a67b257efe7a466d49934746630",
        strip_prefix = "node-v24.4.1-linux-s390x/",
        urls = ["https://nodejs.org/dist/v24.4.1/node-v24.4.1-linux-s390x.tar.gz"],
        version = "24.4.1",
        architecture = "s390x",
        control = "//nodejs:control",
    )

    return module_ctx.extension_metadata(
        root_module_direct_deps = [
            "nodejs20_amd64",
            "nodejs20_arm64",
            "nodejs20_arm",
            "nodejs20_ppc64le",
            "nodejs20_s390x",
            "nodejs22_amd64",
            "nodejs22_arm64",
            "nodejs22_arm",
            "nodejs22_ppc64le",
            "nodejs22_s390x",
            "nodejs24_amd64",
            "nodejs24_arm64",
            "nodejs24_ppc64le",
            "nodejs24_s390x",
        ],
        root_module_direct_dev_deps = [],
    )

_archive = tag_class(attrs = {})

node = module_extension(
    implementation = _node_impl,
    tag_classes = {
        "archive": _archive,
    },
)
